
local SPRITE_MAX = 500;
local sprites = {}
local bounds = vmath.vector3()
local bounds_scale = 4
local use_xmath = true
local paused = false

function init(self)
	msg.post(".", "acquire_input_focus")

	-- update mode in gui
	local data = use_xmath and 'ON' or 'OFF'
	msg.post("#gui", "change_mode", { data = data })
	
	-- collect garbage slower
	collectgarbage('setstepmul', 1000);
	collectgarbage('setpause', 1000);
	
	-- capture window bounds
	local width, height = window.get_size()
	bounds.x = width; bounds.y = height;
	
	for i = 1, SPRITE_MAX do
		local dir = vmath.vector3(0, 1, 0)
		local t = math.rad(math.random(0, 360))
		dir.y = math.sin(t); dir.x = math.cos(t);
		
		local pos = vmath.vector3(bounds.x / bounds_scale, bounds.y / bounds_scale, 0)

		local id = factory.create("#factory", pos);
		sprites[#sprites + 1] = {
			id = id,
			pos = pos,
			dir = dir,
			speed = math.random() * 75 + 25
		}
	end
end

local v1 = vmath.vector3()

function update(self, dt)
	if (not paused) then
		for i, v in ipairs(sprites) do
			if (use_xmath) then
				-- update position
				xmath.mul(v1, v.dir, v.speed * dt)
				xmath.add(v.pos, v.pos, v1)
			else
				v.pos = v.pos + (v.dir * v.speed * dt)
			end

			-- reflect
			if (v.pos.x < 0 or v.pos.x > bounds.x / 2) then
				v.dir.x = v.dir.x * -1
			elseif (v.pos.y < 0 or v.pos.y > bounds.y / 2) then
				v.dir.y = v.dir.y * -1
			end

			-- apply
			go.set_position(v.pos, v.id)
		end
	end
end

function on_message(self, message_id, message, sender)
	
end

function on_input(self, action_id, action)
	if (action_id == hash("space") and action.pressed) then
		use_xmath = not use_xmath
		local data = use_xmath and 'ON' or 'OFF'
		msg.post("#gui", "change_mode", { data = data })
	elseif (action_id == hash("restart") and action.pressed) then
		for i, v in ipairs(sprites) do
			v.pos.x = bounds.x / bounds_scale; v.pos.y = bounds.y / bounds_scale;
			go.set_position(v.pos, v.id)
		end
	elseif (action_id == hash("pause") and action.pressed) then
		paused = not paused
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
